#!/usr/bin/perl
use v5.14;
use warnings;
use AnyEvent;
use UAV::Pilot;
use UAV::Pilot::Commands;
use UAV::Pilot::Driver::ARDrone;
use UAV::Pilot::Driver::ARDrone::NavPacket;
use UAV::Pilot::Control::ARDrone::Event;
use UAV::Pilot::SDL::Events;
use UAV::Pilot::SDL::Joystick;
use Getopt::Long ();

use constant NAV_UPDATE_INTERVAL => 1 / 30;


my $IP       = '192.168.1.1';
my $SHOW_NAV = 0;
Getopt::Long::GetOptions(
    'host=s'   => \$IP,
    'show-nav' => \$SHOW_NAV,
);


sub show_nav
{
    my ($driver, $cv) = @_;
    eval "use UAV::Pilot::Control::ARDrone::SDLNavOutput";
    die $@ if $@;

    my $sdl = UAV::Pilot::Control::ARDrone::SDLNavOutput->new;
    my $timer; $timer = AnyEvent->timer(
        duration => 0.1,
        interval => NAV_UPDATE_INTERVAL,
        cb => sub {
            if( $driver->read_nav_packet ) {
                my $nav_packet = $driver->last_nav_packet;
                $sdl->render( $nav_packet );
            }
            $timer;
        },
    );

    return 1;
}


{
    my $ardrone = UAV::Pilot::Driver::ARDrone->new({
        host => $IP,
    });
    $ardrone->connect;

    my $dev = UAV::Pilot::Control::ARDrone::Event->new({
        sender => $ardrone,
    });

    my $cv = $dev->init_event_loop;
    my $sdl_events = UAV::Pilot::SDL::Events->new({
        condvar => $cv,
    });

    my $joystick = UAV::Pilot::SDL::Joystick->new({
        condvar    => $cv,
        controller => $dev,
    });
    $sdl_events->register( $joystick );

    show_nav( $ardrone, $cv ) if $SHOW_NAV;
    $sdl_events->start_event_loop;
    say "Ready to fly";
    $cv->recv;
    $joystick->close;
}
