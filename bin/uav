#!/usr/bin/perl
use v5.14;
use Term::ReadLine::Perl5;
use UAV::Pilot::REPLCommands;
use UAV::Pilot::Sender::ARDrone;
use UAV::Pilot::Device::ARDrone;

my $IP               = shift || '192.168.1.1';
my $PROMPT           = 'uav> ';
my $MULTILINE_PROMPT = "\t";
my $CONTINUE = 1;


sub run_cmd
{
    my ($cmd, $repl) = @_;
    my $return = 1;
    if( $cmd =~ /\A(?: exit | quit | q ) \s*;\s*\z/x ) {
        $return = 0;
    }
    else {
        eval {
            $repl->run_cmd( $cmd );
        };
        warn $@ if $@;
    }

    return $return;
}

{
    my @cmd = ();

    sub add_cmd
    {
        my ($cmd) = @_;
        push @cmd => $cmd;
        return 1;
    }

    sub full_cmd
    {
        my $cmd = join( ' ', @cmd );
        @cmd = ();
        return $cmd;
    }
}


{
    my $continue = 1;
    my $term = Term::ReadLine::Perl5->new( 'uav' );

    my $ardrone = UAV::Pilot::Sender::ARDrone->new({
        host => $IP,
    });
    $ardrone->connect;

    my $repl = UAV::Pilot::REPLCommands->new({
        device => UAV::Pilot::Device::ARDrone->new({
            sender => $ardrone,
        }),
    });

    my $cur_prompt = $PROMPT;
    while( $continue && defined($_ = $term->readline( $cur_prompt )) ) {
        add_cmd( $_ );

        if( /; \s* \z/x ) {
            my $cmd = full_cmd;
            $continue = run_cmd( $cmd, $repl );
            $cur_prompt = $PROMPT;
        }
        else {
            $cur_prompt = $MULTILINE_PROMPT;
        }
    }
}
